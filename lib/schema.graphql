enum Level{
  principiante
  intermedio
  avanzado
}

union QueryResult = Courses | Students | Monitor

type Courses {
  _id: ID!
  title: String!
  teacher: String!
  description: String
  topic: String
  people: [Students]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Students implements Person{
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person{
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Devuelve todos los cursos"
  getCourses: [Courses],
  "Devuelve un curso"
  getCourse(id: ID!): Courses
  "Devuelve todos los estudiantes"
  getPersons: [Person],
  "Devuelve un estudiante"
  getPerson(id: ID!): Person
  "Devolvera datos de acuerdo a los campos que contengan las palabras pasadas por parametro"
  SearchKeywords(keywords: String!): [QueryResult]
}

input CoursesInput {
  title: String!
  teacher: String!
  description: String
  topic: String
  level: Level
}

input CoursesEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonsInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonsEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Crea un curso"
  newCourse(input: CoursesInput!): Courses,
  "Edita un curso"
  editCourse(_id: ID!, input: CoursesEditInput!): Courses,
  deleteCourse(_id: ID!): Courses,
  newPerson(input: PersonsInput!): Students,
  editPerson(_id: ID!, input: PersonsEditInput!): Students,
  deleteStudent(_id: ID!): Students,
  "Agregar personas a un curso"
  addStudent(courseId: ID!, studentId: ID!): Courses
}